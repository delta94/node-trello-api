{"version":3,"sources":["../../src/middleware/roleMiddleware.js"],"names":["role","req","res","next","user","User","findOne","_id","populate","isAdmin","write","read","status","send","error","msg"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA,IAAMA,IAAI;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,IADO,GACAH,GAAG,CAACG,IADJ;AAAA;AAAA,mBAEEC,iBAAKC,OAAL,CAAa;AAAEC,cAAAA,GAAG,EAAEH,IAAI,CAACG;AAAZ,aAAb,EACVC,QADU,CACD,MADC,EACO,sBADP,CAFF;;AAAA;AAEXJ,YAAAA,IAFW;AAKX;AACA,gBAAIA,IAAI,CAACK,OAAT,EAAkBN,IAAI,GANX,CAQX;AACA;;AACA,gBAAI,CAACC,IAAI,CAACJ,IAAL,CAAUU,KAAX,IAAoB,CAACN,IAAI,CAACJ,IAAL,CAAUW,IAAnC,EAAyC;AACvCT,cAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,gBAAAA,KAAK,EAAE,IADY;AAEnBC,gBAAAA,GAAG,EAAE;AAFc,eAArB;AAID;;AAEDZ,YAAAA,IAAI;;AAjBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJH,IAAI;AAAA;AAAA;AAAA,GAAV;;eAoBeA,I","sourcesContent":["import { User } from '../models/userSchema';\n\nconst role = async (req, res, next) => {\n  let user = req.user;\n  user = await User.findOne({ _id: user._id })\n    .populate('role', 'name read write -_id');\n\n  // If user is admin, just pass\n  if (user.isAdmin) next();\n\n  // If user role don't have read and write access\n  // then send error response.\n  if (!user.role.write && !user.role.read) {\n    res.status(401).send({\n      error: true,\n      msg: \"You don't have permission to access\"\n    });\n  }\n\n  next();\n}\n\nexport default role;\n"],"file":"roleMiddleware.js"}
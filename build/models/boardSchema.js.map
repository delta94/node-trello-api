{"version":3,"sources":["../../src/models/boardSchema.js"],"names":["boardSchema","mongoose","Schema","name","type","String","required","minlength","maxlength","idOrganization","Types","ObjectId","ref","require","closed","Boolean","invited","membership","idMember","memberType","lists","actions","data","Object","action","bgPath","Board","model","validateBoard","board","Joi","string","min","max","validate"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,WAAW,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACtCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,SAAS,EAAE,CAHP;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADgC;AAOtCC,EAAAA,cAAc,EAAE;AACdL,IAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QADd;AAEdC,IAAAA,GAAG,EAAE,MAFS;AAGdC,IAAAA,OAAO,EAAE;AAHK,GAPsB;AAYtCC,EAAAA,MAAM,EAAE;AACNV,IAAAA,IAAI,EAAEW,OADA;AAEN,eAAS;AAFH,GAZ8B;AAgBtCC,EAAAA,OAAO,EAAE;AACPZ,IAAAA,IAAI,EAAEW,OADC;AAEP,eAAS;AAFF,GAhB6B;AAoBtCE,EAAAA,UAAU,EAAE,CAAC;AACXC,IAAAA,QAAQ,EAAE;AACRd,MAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QADpB;AAERC,MAAAA,GAAG,EAAE;AAFG,KADC;AAKXO,IAAAA,UAAU,EAAEd;AALD,GAAD,CApB0B;AA2BtCe,EAAAA,KAAK,EAAE,CACL;AACEhB,IAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QAD9B;AAEEC,IAAAA,GAAG,EAAE;AAFP,GADK,CA3B+B;AAiCtCS,EAAAA,OAAO,EAAE,CACP;AACEH,IAAAA,QAAQ,EAAE;AACRd,MAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QADpB;AAERC,MAAAA,GAAG,EAAE;AAFG,KADZ;AAKEU,IAAAA,IAAI,EAAE;AACJlB,MAAAA,IAAI,EAAEmB;AADF,KALR;AAQEC,IAAAA,MAAM,EAAEnB;AARV,GADO,CAjC6B;AA6CtCoB,EAAAA,MAAM,EAAEpB;AA7C8B,CAApB,CAApB;;AAgDA,IAAMqB,KAAK,GAAGzB,qBAAS0B,KAAT,CAAe,OAAf,EAAwB3B,WAAxB,CAAd;;;;AAEA,IAAM4B,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,MAAM7B,WAAW,GAAG;AAClBG,IAAAA,IAAI,EAAE2B,gBAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,GAAxB,EAA6B3B,QAA7B,EADY;AAElBmB,IAAAA,MAAM,EAAEK,gBAAIC,MAAJ;AAFU,GAApB;AAKA,SAAOD,gBAAII,QAAJ,CAAaL,KAAb,EAAoB7B,WAApB,CAAP;AACD,CAPD","sourcesContent":["import mongoose from 'mongoose';\nimport Joi from 'joi';\n\nconst boardSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 100\n  },\n  idOrganization: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    require: true\n  },\n  closed: {\n    type: Boolean,\n    default: false\n  },\n  invited: {\n    type: Boolean,\n    default: false\n  },\n  membership: [{\n    idMember: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'user',\n    },\n    memberType: String,\n  }],\n  lists: [\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'List'\n    }\n  ],\n  actions: [\n    {\n      idMember: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'User'\n      },\n      data: {\n        type: Object\n      },\n      action: String\n    }\n  ],\n  bgPath: String\n});\n\nconst Board = mongoose.model('board', boardSchema);\n\nconst validateBoard = (board) => {\n  const boardSchema = {\n    name: Joi.string().min(5).max(100).required(),\n    bgPath: Joi.string()\n  }\n\n  return Joi.validate(board, boardSchema);\n};\n\nexport { Board, validateBoard };\n"],"file":"boardSchema.js"}
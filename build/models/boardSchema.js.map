{"version":3,"sources":["../../src/models/boardSchema.js"],"names":["boardSchema","mongoose","Schema","name","type","String","required","minlength","maxlength","idOrganization","Types","ObjectId","ref","require","closed","Boolean","default","invited","membership","idMember","memberType","lists","actions","data","Object","action","bgPath","Board","model","validateBoard","board","Joi","string","min","max","validate"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,IAAIC,mBAASC,MAAb,CAAoB;AACtCC,QAAM;AACJC,UAAMC,MADF;AAEJC,cAAU,IAFN;AAGJC,eAAW,CAHP;AAIJC,eAAW;AAJP,GADgC;AAOtCC,kBAAgB;AACdL,UAAMH,mBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QADd;AAEdC,SAAK,MAFS;AAGdC,aAAS;AAHK,GAPsB;AAYtCC,UAAQ;AACNV,UAAMW,OADA;AAENC,aAAS;AAFH,GAZ8B;AAgBtCC,WAAS;AACPb,UAAMW,OADC;AAEPC,aAAS;AAFF,GAhB6B;AAoBtCE,cAAY,CAAC;AACXC,cAAU;AACRf,YAAMH,mBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QADpB;AAERC,WAAK;AAFG,KADC;AAKXQ,gBAAYf;AALD,GAAD,CApB0B;AA2BtCgB,SAAO,CACL;AACEjB,UAAMH,mBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QAD9B;AAEEC,SAAK;AAFP,GADK,CA3B+B;AAiCtCU,WAAS,CACP;AACEH,cAAU;AACRf,YAAMH,mBAASC,MAAT,CAAgBQ,KAAhB,CAAsBC,QADpB;AAERC,WAAK;AAFG,KADZ;AAKEW,UAAM;AACJnB,YAAMoB;AADF,KALR;AAQEC,YAAQpB;AARV,GADO,CAjC6B;AA6CtCqB,UAAQrB;AA7C8B,CAApB,CAApB;;AAgDA,IAAMsB,QAAQ1B,mBAAS2B,KAAT,CAAe,OAAf,EAAwB5B,WAAxB,CAAd;;AAEA,IAAM6B,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,MAAM9B,cAAc;AAClBG,UAAM4B,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,GAAxB,EAA6B5B,QAA7B,EADY;AAElBoB,YAAQK,cAAIC,MAAJ;AAFU,GAApB;;AAKA,SAAOD,cAAII,QAAJ,CAAaL,KAAb,EAAoB9B,WAApB,CAAP;AACD,CAPD;;QASS2B,K,GAAAA,K;QAAOE,a,GAAAA,a","file":"boardSchema.js","sourcesContent":["import mongoose from 'mongoose';\nimport Joi from 'joi';\n\nconst boardSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 100\n  },\n  idOrganization: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    require: true\n  },\n  closed: {\n    type: Boolean,\n    default: false\n  },\n  invited: {\n    type: Boolean,\n    default: false\n  },\n  membership: [{\n    idMember: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'user',\n    },\n    memberType: String,\n  }],\n  lists: [\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'List'\n    }\n  ],\n  actions: [\n    {\n      idMember: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'User'\n      },\n      data: {\n        type: Object\n      },\n      action: String\n    }\n  ],\n  bgPath: String\n});\n\nconst Board = mongoose.model('board', boardSchema);\n\nconst validateBoard = (board) => {\n  const boardSchema = {\n    name: Joi.string().min(5).max(100).required(),\n    bgPath: Joi.string()\n  }\n\n  return Joi.validate(board, boardSchema);\n};\n\nexport { Board, validateBoard };\n"]}
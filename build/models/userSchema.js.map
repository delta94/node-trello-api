{"version":3,"sources":["../../src/models/userSchema.js"],"names":["userSchema","mongoose","Schema","username","type","String","required","minlength","maxlength","unique","firstname","lastname","email","password","isAdmin","Boolean","default","role","Types","ObjectId","ref","avatar","methods","generateAuthToken","token","jwt","sign","_id","JWT_SECRET_KEY","expiresIn","User","model","validateUser","user","validateSchema","Joi","string","min","max","boolean","array","validate","validateAuthUser"],"mappings":"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","file":"userSchema.js","sourcesContent":["import mongoose from 'mongoose';\nimport Joi from 'joi';\nimport jwt from 'jsonwebtoken';\n\nimport { JWT_SECRET_KEY } from '../config/config';\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 20,\n    unique: true\n  },\n  firstname: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 50\n  },\n  lastname: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 50\n  },\n  email: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 255,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 1024\n  },\n  isAdmin: {\n    type: Boolean,\n    default: false\n  },\n  role: { type: mongoose.Schema.Types.ObjectId, ref: 'Role'},\n  avatar: String\n});\n\nuserSchema.methods.generateAuthToken = function () {\n  const token = jwt.sign({\n    firstname: this.firstname,\n    lastname: this.lastname,\n    isAdmin: this.isAdmin,\n    role: this.role,\n    username: this.username,\n    avatar: this.avatar,\n    _id: this._id\n  }, JWT_SECRET_KEY, {expiresIn: '24h'});\n\n  return token;\n}\n\n\nconst User = mongoose.model('User', userSchema);\n\nconst validateUser = (user) => {\n  const validateSchema = {\n    username: Joi.string().min(5).max(20).required(),\n    firstname: Joi.string().min(5).max(50).required(),\n    lastname: Joi.string().min(5).max(50).required(),\n    email: Joi.string().min(5).max(255).required().email(),\n    password: Joi.string().min(5).max(1024).required(),\n    isAdmin: Joi.boolean(),\n    role: Joi.array()\n  }\n\n  return Joi.validate(user, validateSchema)\n}\n\nconst validateAuthUser = (user) => {\n  const validateSchema = {\n    email: Joi.string().min(5).max(255).required().email(),\n    password: Joi.string().max(1024).required()\n  }\n\n  return Joi.validate(user, validateSchema)\n}\n\nexport { User, validateUser, validateAuthUser };\n"]}
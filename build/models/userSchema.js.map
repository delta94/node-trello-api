{"version":3,"sources":["../../src/models/userSchema.js"],"names":["userSchema","mongoose","Schema","username","type","String","required","minlength","maxlength","unique","firstname","lastname","email","password","isAdmin","Boolean","role","Types","ObjectId","ref","avatar","methods","generateAuthToken","token","jwt","sign","_id","JWT_SECRET_KEY","expiresIn","User","model","validateUser","user","validateSchema","Joi","string","min","max","array","validate","validateAuthUser"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport Joi from 'joi';\nimport jwt from 'jsonwebtoken';\n\nimport { JWT_SECRET_KEY } from '../config/config';\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 20,\n    unique: true\n  },\n  firstname: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 50\n  },\n  lastname: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 50\n  },\n  email: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 255,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 5,\n    maxlength: 1024\n  },\n  isAdmin: {\n    type: Boolean,\n    default: false\n  },\n  role: { type: mongoose.Schema.Types.ObjectId, ref: 'Role'},\n  avatar: String\n});\n\nuserSchema.methods.generateAuthToken = function () {\n  const token = jwt.sign({\n    firstname: this.firstname,\n    lastname: this.lastname,\n    isAdmin: this.isAdmin,\n    role: this.role,\n    username: this.username,\n    avatar: this.avatar,\n    _id: this._id\n  }, JWT_SECRET_KEY, {expiresIn: '24h'});\n\n  return token;\n}\n\n\nconst User = mongoose.model('User', userSchema);\n\nconst validateUser = (user) => {\n  const validateSchema = {\n    username: Joi.string().min(5).max(20).required(),\n    firstname: Joi.string().min(5).max(50).required(),\n    lastname: Joi.string().min(5).max(50).required(),\n    email: Joi.string().min(5).max(255).required().email(),\n    password: Joi.string().min(5).max(1024).required(),\n    isAdmin: Joi.boolean(),\n    role: Joi.array()\n  }\n\n  return Joi.validate(user, validateSchema)\n}\n\nconst validateAuthUser = (user) => {\n  const validateSchema = {\n    email: Joi.string().min(5).max(255).required().email(),\n    password: Joi.string().max(1024).required()\n  }\n\n  return Joi.validate(user, validateSchema)\n}\n\nexport { User, validateUser, validateAuthUser };\n"],"file":"userSchema.js"}
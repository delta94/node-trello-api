{"version":3,"sources":["../../../src/routes/api/auth.js"],"names":["router","express","Router","post","req","res","body","email","password","error","status","send","msg","details","message","User","findOne","user","token","bcrypt","compare","isValidPassword","generateAuthToken","header"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AAEAF,MAAM,CAACG,IAAP,CAAY,GAAZ;AAAA,2FAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACaD,GAAG,CAACE,IADjB,EACPC,KADO,aACPA,KADO,EACAC,QADA,aACAA,QADA,EAGf;;AAHe,gCAIG,kCAAiBJ,GAAG,CAACE,IAArB,CAJH,EAIPG,KAJO,qBAIPA,KAJO;;AAAA,iBAKXA,KALW;AAAA;AAAA;AAAA;;AAAA,6CAMNJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,cAAAA,KAAK,EAAE,IADmB;AAE1BG,cAAAA,GAAG,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBC;AAFI,aAArB,CANM;;AAAA;AAAA;AAAA,mBAYEC,iBAAKC,OAAL,CAAa;AAAET,cAAAA,KAAK,EAALA;AAAF,aAAb,CAZF;;AAAA;AAYXU,YAAAA,IAZW;;AAAA,gBAaVA,IAbU;AAAA;AAAA;AAAA;;AAAA,6CAcNZ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,cAAAA,KAAK,EAAE,IADmB;AAE1BG,cAAAA,GAAG,EAAE,iBAFqB;AAG1BM,cAAAA,KAAK,EAAE;AAHmB,aAArB,CAdM;;AAAA;AAAA;AAAA,mBAsBPC,qBAAOC,OAAP,CAAeZ,QAAf,EAAyBS,IAAI,CAACT,QAA9B,CAtBO;;AAAA;AAqBTa,YAAAA,eArBS;;AAAA,gBAwBVA,eAxBU;AAAA;AAAA;AAAA;;AAAA,6CAyBNhB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BF,cAAAA,KAAK,EAAE,IADmB;AAE1BG,cAAAA,GAAG,EAAE,qBAFqB;AAG1BM,cAAAA,KAAK,EAAE;AAHmB,aAArB,CAzBM;;AAAA;AA+BTA,YAAAA,KA/BS,GA+BDD,IAAI,CAACK,iBAAL,EA/BC;AAgCfjB,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBa,MAAhB,CAAuB,cAAvB,EAAuCL,KAAvC,EAA8CP,IAA9C,CAAmD;AACjDF,cAAAA,KAAK,EAAE,KAD0C;AAEjDG,cAAAA,GAAG,EAAE,kBAF4C;AAGjDM,cAAAA,KAAK,EAAEA;AAH0C,aAAnD;;AAhCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;eAwCelB,M","sourcesContent":["import express from 'express';\nimport bcrypt from \"bcryptjs\";\n\nimport { User, validateAuthUser } from \"../../models/userSchema\";\n\nconst router = express.Router();\n\nrouter.post('/', async (req, res) => {\n  const { email, password } = req.body;\n\n  // Validate input value to match schema\n  const { error } = validateAuthUser(req.body);\n  if (error)\n    return res.status(400).send({\n      error: true,\n      msg: error.details[0].message\n    });\n\n  // Find user email\n  let user = await User.findOne({ email });\n  if (!user)\n    return res.status(400).send({\n      error: true,\n      msg: 'Email Not found',\n      token: \"\"\n    });\n\n  // Password validation\n  const isValidPassword =\n    await bcrypt.compare(password, user.password);\n\n  if (!isValidPassword)\n    return res.status(400).send({\n      error: true,\n      msg: 'Password not match!',\n      token: \"\"\n    });\n\n  const token = user.generateAuthToken();\n  res.status(200).header('x-auth-token', token).send({\n    error: false,\n    msg: \"Login Successful\",\n    token: token\n  });\n});\n\n\nexport default router;\n"],"file":"auth.js"}
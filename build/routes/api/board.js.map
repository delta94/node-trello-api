{"version":3,"sources":["../../../src/routes/api/board.js"],"names":["router","express","Router","get","auth","req","res","Board","find","closed","idOrganization","user","_id","boards","status","send","error","msg","id","params","findById","populate","path","model","List","User","board","put","body","name","bgPath","details","message","findOneAndUpdate","findOneAndDelete","post","save"],"mappings":"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","sourcesContent":["import express from 'express';\n\nimport { Board, validateBoard } from \"../../models/boardSchema\";\nimport { List } from '../../models/listSchema';\nimport { Card } from '../../models/cardSchema';\nimport { User } from '../../models/userSchema';\nimport auth from '../../middleware/authMiddleware';\n\nconst router = express.Router();\n\n/**\n* @routes GET /api/board\n* @desc Board routes to get all borads\n* @api private\n*/\nrouter.get(\"/\", auth,  async (req, res) => {\n  const boards = await Board.find({ closed: false, idOrganization:  req.user._id });\n  if (!boards)\n    return res.status(400).send({\n      error: true,\n      msg: 'You haven\\'t created any board yet.'\n    });\n\n  return res.status(200).send(boards)\n});\n\n/**\n* @routes GET /api/board/:id\n* @desc Board routes to get specific board\n* @api private\n*/\nrouter.get(\"/:id\", auth,  async (req, res) => {\n  const { id } = req.params;\n  const board = await Board.findById({ _id: id }).populate([\n    {\n      path: \"lists\",\n      model: List\n    },\n    {\n      path: \"idOrganization\",\n      model: User\n    }\n  ]);\n\n  if (!board)\n    return res.status(400).send({\n      error: true,\n      msg: 'No board found.'\n    });\n\n  res.status(200).send(board);\n});\n\n/**\n* @routes PUT /api/board/:id\n* @desc Board routes to get specific board\n* @api private\n*/\nrouter.put(\"/:id\", auth,  async (req, res) => {\n  const { id } = req.params;\n  const { name, bgPath } = req.body;\n\n  const { error } = validateBoard(req.body);\n  if (error)\n    return res.status(400).send({\n      error: true,\n      msg: error.details[0].message\n    });\n\n  const board = await Board.findOneAndUpdate({_id: id}, {\n    name,\n    bgPath\n  }, {new: true});\n\n  if (!board)\n    return res.status(400).send({\n      error: true,\n      msg: 'No board found.'\n    });\n\n  res.status(200).send(board);\n});\n\n/**\n* @routes GET /api/board/delete\n* @desc Board routes to get all borads\n* @api private\n*/\nrouter.delete(\"/delete/\", auth, async (req, res) => {\n  const { id } = req.body;\n\n  let board = await Board.findOneAndDelete({ _id: id });\n  if (!board)\n    return res.status(400).send({\n      error: true,\n      msg: 'There is no board to delete'\n    });\n\n  res.status(200).send({error: false, msg: 'Board deleted'});\n});\n\n/**\n* @routes GET /api/\n* @desc Board routes to get all borads\n* @api private\n*/\nrouter.post(\"/create\", auth, async (req, res) => {\n  const { name, bgPath } = req.body;\n\n  const { error } = validateBoard(req.body);\n\n  if (error)\n    return res.status(400).send({\n      error: true,\n      msg: error.details[0].message\n    })\n\n  let board = new Board({ name, idOrganization: req.user._id, bgPath });\n  await board.save();\n  res.status(200).send(board);\n});\n\nexport default router;\n"],"file":"board.js"}
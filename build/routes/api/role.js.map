{"version":3,"sources":["../../../src/routes/api/role.js"],"names":["router","express","Router","get","auth","role","_","res","Role","find","status","send","post","admin","req","body","name","read","write","error","msg","details","message","findOne","save","email","roleId","User","user","_id","isAssigned","filter","item","length","users","push","findOneAndDelete","map"],"mappings":"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","sourcesContent":["import express from 'express';\nimport _ from 'lodash';\nimport { Role, validateRole } from '../../models/roleSchema';\nimport { User } from '../../models/userSchema';\n\nimport auth from '../../middleware/authMiddleware';\nimport admin from '../../middleware/adminMiddleware';\nimport role from '../../middleware/roleMiddleware';\n\nconst router = express.Router();\n\n/**\n * @routes GET /api/role/\n * @desc Get all role\n * @api private\n */\n\nrouter.get('/', [auth, role], async (_, res) => {\n  const role = await Role.find();\n  res.status(200).send(role);\n})\n\n/**\n * @routes POST /api/role/create-role\n * @desc Create new role\n * @api private\n */\nrouter.post('/create-role', [auth, admin], async (req, res) => {\n  const { name, read, write } = req.body;\n\n  // Validate role\n  const { error } = validateRole(req.body);\n  if (error)\n    return res.status(400).send({\n      error: true,\n      msg: error.details[0].message\n    });\n\n  let role = await Role.findOne({ name });\n  if (role) return res.send({\n    error: true,\n    msg: 'Role already exist'\n  });\n\n  role = new Role({ name, read, write });\n  await role.save();\n\n  res.status(200).send(role);\n});\n\n\n/**\n * @route /api/role/set-role\n * @desc set user role by admin\n * @api private\n */\nrouter.post('/set-role', [auth, admin], async (req, res) => {\n  const { email, roleId } = req.body;\n  // find user and role\n  let user = await User.findOne({ email });\n  let role = await Role.findOne({ _id: roleId });\n\n  // Check, is the user already assign this role\n  const isAssigned = _.filter(user.role, item => item == roleId );\n\n  if (isAssigned.length)\n    return res\n      .status(400)\n      .send({\n        error: true,\n        msg: \"Role already assigned to this user\"\n      });\n\n  // If no error and user not assigned this\n  // role before, set the new role\n  user.role = roleId;\n  role.users.push(user._id);\n  await user.save();\n  await role.save();\n\n  res.status(200).send({\n    error: false,\n    msg: 'Successfully add role'\n  });\n});\n\n/**\n* @route /api/role/delete-role\n* @desc set user role by admin\n* @api private\n*/\nrouter.delete('/delete-role', [auth, admin], async (req, res) => {\n  const { roleId } = req.body;\n  // Find role and delete\n  const role = await Role.findOneAndDelete({_id: roleId});\n  if (!role)\n    return res.status(400).send({\n      error: true,\n      msg: 'Role not found.'\n    });\n\n  // Find user who previously assigned\n  // for this role and remove role id from role array\n  let user = await User.find({});\n  user.map(async item => {\n    if (item.role == roleId) {\n      item.role = '';\n    }\n    await item.save();\n  })\n\n  res.status(200).send(user);\n});\n\nexport default router;\n"],"file":"role.js"}
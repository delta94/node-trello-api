{"version":3,"sources":["../../../src/routes/api/role.js"],"names":["router","express","Router","get","auth","role","_","res","Role","find","status","send","post","admin","req","body","name","read","write","error","msg","details","message","findOne","save","email","roleId","User","user","_id","isAssigned","filter","item","length","users","push","delete","findOneAndDelete","map"],"mappings":"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","file":"role.js","sourcesContent":["import express from 'express';\nimport _ from 'lodash';\nimport { Role, validateRole } from '../../models/roleSchema';\nimport { User } from '../../models/userSchema';\n\nimport auth from '../../middleware/authMiddleware';\nimport admin from '../../middleware/adminMiddleware';\nimport role from '../../middleware/roleMiddleware';\n\nconst router = express.Router();\n\n/**\n * @routes GET /api/role/\n * @desc Get all role\n * @api private\n */\n\nrouter.get('/', [auth, role], async (_, res) => {\n  const role = await Role.find();\n  res.status(200).send(role);\n})\n\n/**\n * @routes POST /api/role/create-role\n * @desc Create new role\n * @api private\n */\nrouter.post('/create-role', [auth, admin], async (req, res) => {\n  const { name, read, write } = req.body;\n\n  // Validate role\n  const { error } = validateRole(req.body);\n  if (error)\n    return res.status(400).send({\n      error: true,\n      msg: error.details[0].message\n    });\n\n  let role = await Role.findOne({ name });\n  if (role) return res.send({\n    error: true,\n    msg: 'Role already exist'\n  });\n\n  role = new Role({ name, read, write });\n  await role.save();\n\n  res.status(200).send(role);\n});\n\n\n/**\n * @route /api/role/set-role\n * @desc set user role by admin\n * @api private\n */\nrouter.post('/set-role', [auth, admin], async (req, res) => {\n  const { email, roleId } = req.body;\n  // find user and role\n  let user = await User.findOne({ email });\n  let role = await Role.findOne({ _id: roleId });\n\n  // Check, is the user already assign this role\n  const isAssigned = _.filter(user.role, item => item == roleId );\n\n  if (isAssigned.length)\n    return res\n      .status(400)\n      .send({\n        error: true,\n        msg: \"Role already assigned to this user\"\n      });\n\n  // If no error and user not assigned this\n  // role before, set the new role\n  user.role = roleId;\n  role.users.push(user._id);\n  await user.save();\n  await role.save();\n\n  res.status(200).send({\n    error: false,\n    msg: 'Successfully add role'\n  });\n});\n\n/**\n* @route /api/role/delete-role\n* @desc set user role by admin\n* @api private\n*/\nrouter.delete('/delete-role', [auth, admin], async (req, res) => {\n  const { roleId } = req.body;\n  // Find role and delete\n  const role = await Role.findOneAndDelete({_id: roleId});\n  if (!role)\n    return res.status(400).send({\n      error: true,\n      msg: 'Role not found.'\n    });\n\n  // Find user who previously assigned\n  // for this role and remove role id from role array\n  let user = await User.find({});\n  user.map(async item => {\n    if (item.role == roleId) {\n      item.role = '';\n    }\n    await item.save();\n  })\n\n  res.status(200).send(user);\n});\n\nexport default router;\n"]}
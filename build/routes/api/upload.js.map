{"version":3,"sources":["../../../src/routes/api/upload.js"],"names":["router","express","Router","storage","multer","diskStorage","destination","filename","req","file","cb","crypto","pseudoRandomBytes","err","raw","toString","path","extname","originalname","uploadMiddleware","single","post","auth","res","console","log","status","send","error","msg","body","user","JSON","parse","User","findOne","_id","updateUser","avatar","save"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AAEA,IAAIC,OAAO,GAAGC,mBAAOC,WAAP,CAAmB;AAC/BC,EAAAA,WAAW,EAAE,YADkB;AAE/BC,EAAAA,QAAQ,EAAE,kBAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACjCC,uBAAOC,iBAAP,CAAyB,EAAzB,EAA6B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC/C,UAAID,GAAJ,EAAS,OAAOH,EAAE,CAACG,GAAD,CAAT;AAETH,MAAAA,EAAE,CAAC,IAAD,EAAOI,GAAG,CAACC,QAAJ,CAAa,KAAb,IAAsBC,iBAAKC,OAAL,CAAaR,IAAI,CAACS,YAAlB,CAA7B,CAAF;AACD,KAJD;AAKD;AAR8B,CAAnB,CAAd;;AAYA,IAAMC,gBAAgB,GAAG,wBAAO;AAAEhB,EAAAA,OAAO,EAAEA;AAAX,CAAP,EAA6BiB,MAA7B,CAAoC,QAApC,CAAzB,C,CAGA;;AACApB,MAAM,CAACqB,IAAP,CAAY,GAAZ,EAAiBC,0BAAjB,EAAuBH,gBAAvB;AAAA,2FAAyC,iBAAOX,GAAP,EAAYe,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpBf,GAAG,CAACC,IADgB;;AAAA;AACjCA,YAAAA,IADiC;AAEvCe,YAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;;AAFuC,gBAGlCA,IAHkC;AAAA;AAAA;AAAA;;AAAA,6CAI9Bc,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,cAAAA,KAAK,EAAE,IADmB;AAE1BC,cAAAA,GAAG,EAAE;AAFqB,aAArB,CAJ8B;;AAAA;AAAA;AAAA,mBASlBrB,GAAG,CAACsB,IATc;;AAAA;AAAA;AASjCC,YAAAA,IATiC,mBASjCA,IATiC;AAUvCA,YAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AAVuC;AAAA,mBAYhBG,iBAAKC,OAAL,CAAa;AAAEC,cAAAA,GAAG,EAAEL,IAAI,CAACK;AAAZ,aAAb,CAZgB;;AAAA;AAYnCC,YAAAA,UAZmC;;AAAA,kBAanCA,UAAU,CAACC,MAAX,KAAsB,EAba;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAc/B,qBAAID,UAAU,CAACC,MAAf,CAd+B;;AAAA;AAgBvCD,YAAAA,UAAU,CAACC,MAAX,GAAoB7B,IAAI,CAACO,IAAzB;AAhBuC;AAAA,mBAiBjCqB,UAAU,CAACE,IAAX,EAjBiC;;AAAA;AAmBvChB,YAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBlB,IAArB;;AAnBuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzC;;AAAA;AAAA;AAAA;AAAA;eAsBeT,M","sourcesContent":["import express from 'express';\nimport multer from 'multer';\nimport path from 'path';\nimport crypto from 'crypto';\nimport glob from 'glob';\nimport del from 'del';\n\nimport { Upload } from '../../models/uploadSchema';\nimport {User} from '../../models/userSchema';\nimport auth from \"../../middleware/authMiddleware\";\n\nconst router = express.Router();\n\nvar storage = multer.diskStorage({\n  destination: \"./uploads/\",\n  filename: function (req, file, cb) {\n    crypto.pseudoRandomBytes(16, function (err, raw) {\n      if (err) return cb(err)\n\n      cb(null, raw.toString('hex') + path.extname(file.originalname))\n    })\n  }\n});\n\n\nconst uploadMiddleware = multer({ storage: storage }).single(\"avatar\");\n\n\n// Upload route\nrouter.post(\"/\", auth, uploadMiddleware, async (req, res) => {\n  const file = await req.file;\n  console.log(file);\n  if (!file)\n    return res.status(400).send({\n      error: true,\n      msg: \"No file selected to upload\"\n    });\n\n  let { user } = await req.body;\n  user = JSON.parse(user);\n\n  let updateUser = await User.findOne({ _id: user._id });\n  if (updateUser.avatar !== '') {\n    await del(updateUser.avatar);\n  }\n  updateUser.avatar = file.path;\n  await updateUser.save();\n\n  res.status(200).send(file);\n});\n\nexport default router;\n"],"file":"upload.js"}
{"version":3,"sources":["../../../src/routes/api/upload.js"],"names":["router","express","Router","storage","multer","diskStorage","destination","filename","req","file","cb","crypto","pseudoRandomBytes","err","raw","toString","path","extname","originalname","uploadMiddleware","single","post","auth","res","console","log","status","send","error","msg","body","user","JSON","parse","User","findOne","_id","updateUser","avatar","save"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;AACA;;;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA,IAAIC,UAAUC,iBAAOC,WAAP,CAAmB;AAC/BC,eAAa,YADkB;AAE/BC,YAAU,kBAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACjCC,qBAAOC,iBAAP,CAAyB,EAAzB,EAA6B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC/C,UAAID,GAAJ,EAAS,OAAOH,GAAGG,GAAH,CAAP;;AAETH,SAAG,IAAH,EAASI,IAAIC,QAAJ,CAAa,KAAb,IAAsBC,eAAKC,OAAL,CAAaR,KAAKS,YAAlB,CAA/B;AACD,KAJD;AAKD;AAR8B,CAAnB,CAAd;;AAYA,IAAMC,mBAAmB,sBAAO,EAAEhB,SAASA,OAAX,EAAP,EAA6BiB,MAA7B,CAAoC,QAApC,CAAzB;;AAGA;AACApB,OAAOqB,IAAP,CAAY,GAAZ,EAAiBC,wBAAjB,EAAuBH,gBAAvB;AAAA,sFAAyC,iBAAOX,GAAP,EAAYe,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpBf,IAAIC,IADgB;;AAAA;AACjCA,gBADiC;;AAEvCe,oBAAQC,GAAR,CAAYhB,IAAZ;;AAFuC,gBAGlCA,IAHkC;AAAA;AAAA;AAAA;;AAAA,6CAI9Bc,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAO,IADmB;AAE1BC,mBAAK;AAFqB,aAArB,CAJ8B;;AAAA;AAAA;AAAA,mBASlBrB,IAAIsB,IATc;;AAAA;AAAA;AASjCC,gBATiC,SASjCA,IATiC;;AAUvCA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAVuC;AAAA,mBAYhBG,iBAAKC,OAAL,CAAa,EAAEC,KAAKL,KAAKK,GAAZ,EAAb,CAZgB;;AAAA;AAYnCC,sBAZmC;;AAAA,kBAanCA,WAAWC,MAAX,KAAsB,EAba;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAc/B,mBAAID,WAAWC,MAAf,CAd+B;;AAAA;AAgBvCD,uBAAWC,MAAX,GAAoB7B,KAAKO,IAAzB;AAhBuC;AAAA,mBAiBjCqB,WAAWE,IAAX,EAjBiC;;AAAA;;AAmBvChB,gBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBlB,IAArB;;AAnBuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzC;;AAAA;AAAA;AAAA;AAAA;;kBAsBeT,M","file":"upload.js","sourcesContent":["import express from 'express';\nimport multer from 'multer';\nimport path from 'path';\nimport crypto from 'crypto';\nimport glob from 'glob';\nimport del from 'del';\n\nimport { Upload } from '../../models/uploadSchema';\nimport {User} from '../../models/userSchema';\nimport auth from \"../../middleware/authMiddleware\";\n\nconst router = express.Router();\n\nvar storage = multer.diskStorage({\n  destination: \"./uploads/\",\n  filename: function (req, file, cb) {\n    crypto.pseudoRandomBytes(16, function (err, raw) {\n      if (err) return cb(err)\n\n      cb(null, raw.toString('hex') + path.extname(file.originalname))\n    })\n  }\n});\n\n\nconst uploadMiddleware = multer({ storage: storage }).single(\"avatar\");\n\n\n// Upload route\nrouter.post(\"/\", auth, uploadMiddleware, async (req, res) => {\n  const file = await req.file;\n  console.log(file);\n  if (!file)\n    return res.status(400).send({\n      error: true,\n      msg: \"No file selected to upload\"\n    });\n\n  let { user } = await req.body;\n  user = JSON.parse(user);\n\n  let updateUser = await User.findOne({ _id: user._id });\n  if (updateUser.avatar !== '') {\n    await del(updateUser.avatar);\n  }\n  updateUser.avatar = file.path;\n  await updateUser.save();\n\n  res.status(200).send(file);\n});\n\nexport default router;\n"]}
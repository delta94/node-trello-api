{"version":3,"sources":["../../../src/routes/api/users.js"],"names":["router","express","Router","post","req","res","body","username","firstname","lastname","email","password","isAdmin","error","status","send","msg","details","message","token","User","find","$or","user","length","bcrypt","genSalt","salt","hash","hashed","save","generateAuthToken","header","get","auth","id","params","findById","put","data","updateOne"],"mappings":"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","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcryptjs';\n\nimport { User, validateUser } from '../../models/userSchema';\nimport auth from '../../middleware/authMiddleware';\n\nconst router = express.Router();\n\n/**\n * @routes GET /api/users/register\n * @desc Register routes\n * @api public\n */\nrouter.post('/register', async (req, res) => {\n  const {\n    username,\n    firstname,\n    lastname,\n    email,\n    password,\n    isAdmin } = req.body;\n\n  // Validate input value to match schema\n  const { error } = validateUser(req.body);\n  if (error) return res.status(400).send({\n    error: true,\n    msg: error.details[0].message,\n    token: ''\n  });\n\n  // Check user already registered or not\n  let user = await User.find({\n    $or: [{ username }, { email }]\n  });\n\n  // Email already exists\n  if (user.length && user[0].email === email)\n    return res.status(400).send({\n      error: true,\n      msg: 'Email already exists',\n      token: ''\n    });\n\n  // username already tanen\n  if (user.length && user[0].username === username)\n    return res.status(400).send({\n      error: true,\n      msg: 'Username already taken, try different one',\n      token: ''\n    });\n\n  // Create user\n  user = new User({\n    username,\n    firstname,\n    lastname,\n    email,\n    password,\n    isAdmin\n  });\n\n  // Generate hash password\n  const salt = await bcrypt.genSalt(10);\n  const hashed = await bcrypt.hash(password, salt);\n  // Update user password with hashed\n  user.password = hashed;\n  await user.save();\n\n  const token = user.generateAuthToken();\n  res.status(200).header('x-auth-token', token).send({error: false, msg: 'Registration successful', token: token});\n});\n\n\n// Get user\nrouter.get('/:id', auth, async (req, res) => {\n  const { id } = req.params;\n  const user = await User.findById(id);\n  res.status(200).send(user);\n});\n\n// Update user\nrouter.put('/:id/update', auth, async (req, res) => {\n  const { id } = req.params;\n  const { data } = req.body;\n  let user = await User.findById(id);\n\n  if (data.password !== user.password) {\n    const salt = await bcrypt.genSalt(10);\n    const hashed = await bcrypt.hash(data.password, salt);\n    // Update user password with hashed\n    data.password = hashed;\n  }\n\n  await user.updateOne(data);\n  res.status(200).send(user);\n});\n\nexport default router;\n"],"file":"users.js"}
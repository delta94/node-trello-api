{"version":3,"sources":["../../../src/routes/api/users.js"],"names":["router","express","Router","post","req","res","body","username","firstname","lastname","email","password","isAdmin","error","status","send","msg","details","message","token","User","find","$or","user","length","bcrypt","genSalt","salt","hash","hashed","save","generateAuthToken","header","get","auth","id","params","findById","put","data","updateOne"],"mappings":"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","file":"users.js","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcryptjs';\n\nimport { User, validateUser } from '../../models/userSchema';\nimport auth from '../../middleware/authMiddleware';\n\nconst router = express.Router();\n\n/**\n * @routes GET /api/users/register\n * @desc Register routes\n * @api public\n */\nrouter.post('/register', async (req, res) => {\n  const {\n    username,\n    firstname,\n    lastname,\n    email,\n    password,\n    isAdmin } = req.body;\n\n  // Validate input value to match schema\n  const { error } = validateUser(req.body);\n  if (error) return res.status(400).send({\n    error: true,\n    msg: error.details[0].message,\n    token: ''\n  });\n\n  // Check user already registered or not\n  let user = await User.find({\n    $or: [{ username }, { email }]\n  });\n\n  // Email already exists\n  if (user.length && user[0].email === email)\n    return res.status(400).send({\n      error: true,\n      msg: 'Email already exists',\n      token: ''\n    });\n\n  // username already tanen\n  if (user.length && user[0].username === username)\n    return res.status(400).send({\n      error: true,\n      msg: 'Username already taken, try different one',\n      token: ''\n    });\n\n  // Create user\n  user = new User({\n    username,\n    firstname,\n    lastname,\n    email,\n    password,\n    isAdmin\n  });\n\n  // Generate hash password\n  const salt = await bcrypt.genSalt(10);\n  const hashed = await bcrypt.hash(password, salt);\n  // Update user password with hashed\n  user.password = hashed;\n  await user.save();\n\n  const token = user.generateAuthToken();\n  res.status(200).header('x-auth-token', token).send({error: false, msg: 'Registration successful', token: token});\n});\n\n\n// Get user\nrouter.get('/:id', auth, async (req, res) => {\n  const { id } = req.params;\n  const user = await User.findById(id);\n  res.status(200).send(user);\n});\n\n// Update user\nrouter.put('/:id/update', auth, async (req, res) => {\n  const { id } = req.params;\n  const { data } = req.body;\n  let user = await User.findById(id);\n\n  if (data.password !== user.password) {\n    const salt = await bcrypt.genSalt(10);\n    const hashed = await bcrypt.hash(data.password, salt);\n    // Update user password with hashed\n    data.password = hashed;\n  }\n\n  await user.updateOne(data);\n  res.status(200).send(user);\n});\n\nexport default router;\n"]}